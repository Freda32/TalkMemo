Unknown 0:00
One semester going to ask at this point are you looking to ace everything?

Unknown 0:51
Get started so today we will talk about XML JSON, these data exchange format on the web. We've talked about API, web scraping techniques and you know how to use the request properly. And in general, how to write like proper web server. And what should your web server provide if you choose to write it in some manner. Before we start, I have a note about the chat CBT or the same from thing ending with Spider Man says your thought your Spider Man's so he says nothing with other suits. And then this guy says if you're nothing says you cannot go to that chat with me and it's kind of a tricky situation. So you should learn a bit more about how to read code and then go to captivity or not

Unknown 1:59
alright. Start with

Unknown 2:03
data on the web. So we have this activity request response model, and you know, you kind of are aware of that by now. You did that assignment this week. Then we need to actually figure out how to exchange data in in a better way so that programs understand each other, and then you know, what protocols they should follow, what operations they support, and so on. So we need to come up with an agreed way to represent data, going to build applications and also across across networks. So there are two commonly used formats XML and JSON. Everyone aware of XML once once there is only one who knows too, and who knows about JSON. And for good measure, because XML is kind of in the past, but you don't have to cover that in a class. There are some very famous web services which are still using XML. One example is LexisNexis. LexisNexis is basically they collect news from all over the world and then they provide to you as an API, but the data format they have is XML, which is should have been removed.

Unknown 3:40
So it shouldn't have been moved on and everyone should use GSM. So if in future you are going to write a web server or develop an API, it will be in JSON rest assured. So let's take an example right? You have texting application on the phone, let's say John wants to send a message. And then on the other hand, is Alice but her application is running on desktop, right? So and then in between there is a server so what what is being sent and what is the format right? So we need to first define what exactly is sent when you send a text message. And then the second one is like which format should it be? Let's say we have, we need to have a sender like who comes from the CPN, where it's going and an actual message. So it must be standard, whatever we are going to send to the server and whatever we are returning or getting back from the server. So that server knows where it's coming from and knows how to read up to the next person. And then the next person house. So we need to have a standard format. So sending the data across the net. So you know, in this example, we're using JSON. JSON looks very similar. To a dictionary. But it has support in other languages like almost organisaties. So in JavaScript, I saw the JavaScript object in Java X called HashMap. In Python, it's a dictionary and in PHP and PHP. It's also whatever we send on the wire is called the wire protocol. Every network has a physical parts so you send something from your phone, it goes to Wi Fi, and then from the router it goes to a bunch of efforts. But in the end or there is some piece of network which is actual cables, right? So that's what it's referring to wire protocol. So we need to agree on a wire format, right? So what format should it be? So one is XML so you can see they have a person tag, and then person has a name. And then there is a phone. And then when you convert from Python dictionary to data format, it's called serialization. And when you when another application receives it or other, like it's written in Java, so you have to be serialized into a JavaScript or Java HashMap. So there is serialization, there is D serialization and then there is the actual data format. And the other format is JSON, right? So this is simply looks like this. It's a key value pair. You know, you, you serialize your data Python dictionary to a JSON object, and then you'll be serialized on the other side. Okay, so XML there are a bunch of things for XML might be good. You might feel like it's a foreigner of the past. So okay, this is what an excellent looks like. Everything is defined by tags, right? So you have a person that and the person that you have a name. And so do you find a button within the person you have the name of the person and the phone number of the person? The primary purpose The purpose is to help Information Systems share structured data, and it started as a subset of SGML which is Standard Generalized Markup Language are relatively human legible. But you know, if you if you see my brain device gets clogged up but it says it's legible. So some cases. So again, revisiting the slide from last week, this is talking about HTML. So you know, we have tags in HTML to remember we have had body title h1 tags and so on. So far these tags are present in XML. The problem is, the tags are really teleflow Send me that index. This is this is what you see in the browser. And this is a concept right? So XML is very similar to this. Except Except so you know, it says problems with XML but its own limitations of HTML. So XML is intended for the presentation of information is not designed to send data to a different application just for how to show or present the data to the user. And that estimate contains a fixed set of markup tags right. So whenever there is a change and then you know, it's appropriate for data because stats do not convey information about the meaning of the data which is inside, right so and then the facts are not extensive. So you have x one, let's say you have x one, and you have something inside it. The only thing it tells you is that it's a header. And it does not tell you whether it's a title of a book or it can be a name of a person, it does not. So, the limitations are in a fixed set of markup tags and it does not convey the meaning of actual data. So when we have XML which is extensible markup language, you can see at the top we have attacked, like Sorry, I had an h2 reasoning something nothing. And then it says by V Merrick, and I want to pronounce that. And then you have the publisher, and then the ISBN for, right. So that's all you get in XML. But if you want to convey some meaning to the data, you can use XML and then XML you have the book that then it says the title of the book is that and then there are two authors, then the publisher is stranger and that was published in 1993. And then this is the ISBN post for that book. So already we are conveying. We are adding meaning to the database. So now you can read the XML and then you can see okay, this is what it is. And it can be used in a rewrite change format and other fiction will understand. Okay, so then again, let's talk about the design of XML. Tags can we use to indicate the meaning. Then there is no fixed set of tags so you can define new tags you can define as you want. The underlying data model is a tree structure, right? So it can represent drops to IDs and IV references, but it's a bit cumbersome. So the underlying data model is a tree structure in XML. So we'll see how that looks. And then it provides a combination format, and then we'll have some WCC recommendations, probably go and read that on what specs you can have, whatever the structure of that, and what's the attributes you can add and so on. And then say that combat is an extra XML so XML, as you know, is hypertext markup language. It's for web web presentation of data. XML is for transfer of data. SGML has predefined tags XML as user defined tags. XML is case insensitive. So you know, it doesn't matter if you write capital head or solid. It's always the same question. But for XML, that's not the case. It's case sensitive. XML is very lenient. So if you miss it, that it will still render it because browsers kind of know what to expect. So if you miss something rather than part of the budget, XML is very strict. So if you haven't missing that, it's going to throw an error and it's not a valid XML and XML was first initially started in 1991. And this latest version. So that's these are the differences, the similarities. They have a basic syntactic structure. They have a tag, and then they have some attributes. And then there is text content, right? So that's the basic, excellent structure that you can using that you can write very complex examples. Okay, so excellent elements are low. So we talked about how XML is a tree data structure. So, in talking about trees, we have elements of a tree or nodes of a tree. In this example, you can see we have an old person, people and then an old person, and within that we have two more nodes, name and phone. So, in pink, these are the complex elements because it has more facts are like more or

Unknown 13:34
more nodes inside. And then the yellow one is a simple element because it has no no more nodes inside it just has text inside it. So that's the difference. between simple and complex elements. Then, you know we have some basics. So in green, you see the starting tag. in yellow, you see the end tag, so anti has less than and bold slash to begin with. White is the text content and then in orange, you add attributes. And then you have a self closing tag here. So you don't have to have a text inside tag. You can simply close it. It only has an attribute, text. So we this is a self closing tag. And then you know line ends do not matter. whitespace is discarded in the text. And we indent this column to be to be more readable, like so. A computer does not care about your indentation. To be able to understand what's this terminology for excellence or tags indicate the beginning and ending of elements. There are attributes which are key value pairs on the opening tag of excellence so they provide more information about the tag or what the reader is inside. Then serialize deserialize you know your convert data in one program into common format and then can be transmitted between systems in like programming language independent manner, right. So you can send something from Python to an application which is running in Java. So in the back programming language doesn't matter. Only thing matters, what you're actually sending. And of course, both languages need to understand that this is a data structure.

Unknown 15:33
So this is how XML looks as a tree. So, this is a very simple XML you have a root tag is a and then you have a b tag and then you have a C and then so on right. And then this is how you represent that as a tree. So you have a D and then there is a text for B and then you have a C D and then text for B, AC E and the next one which is this you are okay, so then you can also have attributes in the tags so this is how you can see the attributes step up to five represented in the green. So, this Tree Structure provides a very good context, like how you can store graphs in XML, for example, right, so that's it, you have a graph. Let's talk about wiki data for a second. So wiki data is like a graph representation on Wikipedia. So Wikipedia has been articles and then what wiki data has done. It took the topic of the article provide a queue node, so node has a queue and then some numbers, a few nodes. And then it has some information about that but everything is ID property and value so there is no text. So if you have a description for some entity, it will be in a let's say, like a description, properties description, and the value is actual value. And then let's say you have some say Obama, Obama, and then you know his birthplace birthday and all these things are property value pairs can be carried out so you can represent the things in XML pretty easily because it lends itself to be a tree then we have an example. So you know, we have that XML, person name. Then there is a phone type is international and actual phone number, and email hydrotreating. So this is how you look you can look at it as a tree, so your person name and then the square rocks boxes are actual text for that attribute. And then for that element, and then the attributes are represented on the node. Because you know, it's not it's not that leaf node, if you will. So suppose we have two attributes one type and email highly curious. Then, so you can imagine that you can see XML as fats to write so this is your three simple XML. So, if you say a b it will get to x then you say a C, D gets you to y and then a C E will get you to z. So you have a path to the actual data. And in the libraries we will see today we can absolutely use this class to get to the actual data. You don't need to traverse your XML. In Derby, you can just give it a path, shut the text out and you want me to do that. Okay, now again, you have this tree. You say person named John Weston phone gets you this. Just an example of how we will use this. There's a more complex XML example. So the first line is a comment. So, right it's the same as HTML, backslash exclamation and you know, whatever you write inside becomes a comment. When you have the opening tag, which is its defining two books. In the book tag, you have an attribute for the book, which is the ID of the book. So yeah, book, one, and add some more information about it. So what's the author? Who's the author? What's the title? When was it published? What's the ISBN and do publish it so, you see the attributes there and then you see the sub elements exist at structure and choice of elements versus attribute is often a matter of taste, but attributes cannot be nested right. So you have book inside the bookstore, author inside the book and so on. So those are nested tags. But you cannot nest attributes, and you could have simply easily said instead of book ID equal to 101, you can have say you can say book and then another tag inside and say Id this one, but it's like it's it's a design thing, how you want to design

Unknown 20:25
Okay, so we have namespaces namespaces that indicate the scope within which an element is letting anybody know what namespaces are? You see namespaces in other places? C++ Yeah, these things because in C++, we'll see like, what it actually actually mean. So why do we why, why do we might need namespaces. So let's say you define some elements in your XML right? It says Book Potter. But if you're defending you have multiple documents and you want to combine documents. If you if you find elements within a global scope, like if you say a book, it only means book, right? It becomes a problem when combining elements from multiple documents. So for example, book in one case might mean that it's an book in a library. And then book in another document might mean that it's like account book, for example, right? So it has a different thing. So if you just say a book and try to combine those two things, then you're gonna have a problem. Understanding of your which means what? So to overcome that problem, we have namespaces. So you define something, it's generally a URL. So you can go to the URL and see what the book means. Enactus so that's what namespaces are. And often we shorten them into like they have, like, I don't see an example of EDI. So you can start on that so that you don't have to write the URL all the time, otherwise it will become tuple. Yeah, so then again, you can use namespaces for modularity. So let's say you defined some namespaces with some markup tags, which are very well designed, right? So your bookstore, XML definition is great. Everybody wants to use it. So you can publish your main publisher structure in that namespace and people can be used that instead of writing their own, so that's an advantage. Then you have namespaces in XML. It's a collection of names. It's identified by a URI. So I said URL, but you know exactly. You're right. And nobody knows what's the difference between URL and Uri?

Unknown 22:59
So you want to use uniform, uniform resource indicator, and URL is a uniform resource. locator. So if you if you think about it, so URL is like, you know, as you see in that URL, so it takes you to a particular location, particular resource. And URI can be a URL or it can be a file path, or it can be a namespace. So URI is a bit more generic than a URL. URL is very specific HTTP URLs, Uri can be SP five parts

Unknown 23:40
Okay, so here's an example. So we've defined the prefix EDI and then bind it to this URL or URI for XML right? So we say x XML NS which is XML namespace. Then you have the EDI, we define the name of the namespace. And then it goes to this. One example is ASCII. So if you go to that URL, let's say this existed, then you can see what this namespace means and what the elements in the namespace mean. So then you say EDI price equal to euro and so on, then you can use it like that. Okay, any questions about namespaces? So, this one is generally global, you know, I mean, so whatever you define sorry. I'll just keep talking about scope of the namespace or scope. So, when you combine multiple documents, so the namespaces are global, right, so it's defined to global so whoever goes to that namespace or when you put a namespace in your document, that's for everyone to see and use, but the elements within the namespace are only valid in their scope. So when you combine different documents, you know the application or the user, they will know that this element in this namespace means this and they will use it accordingly. So that's how you might change. Attributes can be anything right so they can change. So in namespace, you might define attributes also. Define all of those things. And your dishes.

Unknown 25:31
So it's kind of like in environments for examples.

Unknown 25:34
You can come up with like a legit climate. So whenever you install in that one environment will be combined against the school you can think scope wise it means the same. Then there is something called XML schema definition. So now you have seen some XML. There is also how to define that XML so it's a description of a legal format of an XML document. Let's see. So, it is expressed in terms of constraint on the structure and contents, right. So it tells you, for example, the book should come under a bookstore author should come under book and so on. So that's the constraint on the structure it will define that and then the content of the documents right. So it will tell you, you can add authors to this but you might not add any other names to that you can add publisher name to that, but you can add a lot of something to back so it defines the subject. And also what's the content of that XML? Yeah, it's used to specify a contract between systems. So tax application example you want to send something you will define an XML schema and then you can say my system will only accept XML that conforms to this particular schema. So you cannot send it any XML will just throw an error. Generally there is an actor which can validate your XML according to a schema, right? So if your XML is not in the schema, you can throw an error. If a particular piece of XML needs a specification, it is set to validate right so if your XML is conforming to a schema, it will validate otherwise, it will not validate tell the user the user that they are doing something. Here's an example. Very simple. So you have a person it has a last name, age and date form, right? So these are tags for that person. And then this is your XML schema definition for that. So you have access, access is the namespace. Yep. So you have access to complex site. Then you define the name of the tag, right? So it's defining the name of the tag itself. So it says it should be person at the root. Then it's a sequence meaning it can have multiple elements inside that it says XML access elements. It's name is last name. So last name is the name of the deck and type is String, right? So you need to have the data types in XML to so this is how you define your response. So and then the next one is excellent. Access element name is H. Its database is engaged. And then you have access element names get on can I help

Unknown 28:38
if your safety is at risk

Unknown 28:46
I don't know what to do with that. Okay. So then you have the data right as date and you know, so whenever you when you send an XML, you can you can check if it is conforming to this or not and then you have your excellent reputation model. So access these structures, again, orange colleges are elements. And then you have the sequences whenever you have multiple elements. It's a sequence. And when you have a complex type, it just joins a bunch of different things. So it can have an element it can have a sequence, and so Okay, so we can also define constraints on SSD. For example, on the left hand side, you'll see access element name is full name. So that's the name of the deck type is a string. And then it says when a plus one Max occurs one right so it's telling it it cannot occur more than once it has to be if you have an excellent it should only your full name should be defined once. Then you have a child name and then it says minimum of zero and Max poker standard means you can have 05 up to 10 Child games and it has an XML which is conforming to that so you have a XML person full name only one and then there are four channels which is a valid because you might expect zero and so in this way you can define constraints on your excellent so there are different data types. So you have strings, dates, daytime, decimal and integer. So date, daytime has date and time and the timezone information. And then you have bear symbol, which is the float type in Python so in in XML, it's just called decimal and then in paradise

Unknown 30:58
Okay, so this is just saying telling you that it's common to represent time in UTC. Given that servers are often scattered around the world, right, so you have Greenwich Meridian time in UK whatever time is that you define your time for the application in terms of that. And often you'll see localized time zones in the browser. So if you're looking at a website in LA, it will show you the current time in LA, but if you are looking at the same website in India, for example, it will show you that local time in India. So how that is possible is you send all the times are generally in UTC and then the local browser converting that time to the local time. So that's how this these things work. In the real world. Okay. Here's a more complex XML schema. So, so I'm looking at this part. So we're defining the element and bookstore has a complex type. We see access the element name is a comp site. And then there is a sequence. So it says element ref equal to book minimum occur once and Max occurs unmonitored, right? So you can have unlimited books in your bookstore, that sort of setting and then it says reference equal to book, right so you define book here, and this and then you're referencing your book inside your bookstore, right, so you don't have to define the whole thing. So then you have a book. It has a title, only one title, author, unlimited authors, one date of publication, one ISBN and one publisher. And inside that you are referencing title author date is the publisher which are the why here like so you have admin name, title, which type is String and so on. So using this you can define very complex access Ts and you know, your XML can perform. So, instead of defining your book right inside, you can define a book outside, maybe in a different document and then combine that two documents to get your schema definition for them. And if it is in the same namespace, you're golden otherwise you're gonna have some questions, indexes these motions. Okay, then let's talk about five things of excellent. So, there is a prom string method is inbuilt in Python. There is a library called XML and also L XML. So you can use those two libraries to pass your excellent so from string converts the string representation of XML into a tree of XML. So we'll see examples of that. So when XML is in free form, we have a series of methods we can call to extract coercion. So remember, you had find and find all in BeautifulSoup, right? So you can do the same thing if you can find a particular element it will return one or all if you prefer. The fine function is to choose a node that matches a specified tag. So if we look at the first node, and then each node can have some text, it can have some attributes and we saw some examples. So many extreme effects, you can get the textile out of it, or you can get an attribute out of it using these metrics. And each node can be the top of another tree of life. So you have nested tree nested elements past and present in the library. Okay, so here's a comparison between BeautifulSoup was Elementary. So just so you know, you can use BeautifulSoup to pass HTML and also XML right? So you can use that or you can you may choose to use the pythons inbuilt library for that. So, XML is the English Library. So this is how it works. So you have to import BeautifulSoup in here you import Elementary and then you know you create a create an instance of BeautifulSoup get up with agenda data is a string in this case. And then you say I want XML or XML in here you will you don't need to set up the products working on XML itself, then it's fine and find all which is very similar, exactly the same actually. And then for in XML, you can say question dot get ID in in vivo. So we have to say person dot, dot get ID. To get the ID you have to. There are two different ways and then to get the text you have to say person dot string and we will sue. And so you can see even this, you can see we'll see examples of that in the notebook. Okay, then we have externals as part so, remember we talked about three and three parts and that can be actual data in here, AB su X ACD at UI so we can use this part to get the data so you don't have to use Find or find out all the time, you can simply use the level textbox. So as far as a query language to select elements in an excellent tree and then double slash book, it will select elements with a tag book at any level of the hierarchy, right so I use a special book it will find the books whenever it's defined, you can have multiple nested XML elements to combine books at any level of hierarchy. Then you have slash books slash author, this is a very absolute path. So it will look at the top level book and then the author which is inside that. Select element with the given path. Then you have book author next, it will only have a string inside right it's not only five anymore, you're getting actual text. Then you have double backslash and book to that it will find all the books in any hierarchy and it will return you the second element with the tab. So you know find all the books written this service written called element with a tag. Then you have book and then publisher, ABC. This will find a book element with a text. Insert element publisher equals ABC, right so you'll find all the books and for all the publishers which are ABC return return those elements. Then you have host slash book price 30 So you can also do a comparison inside or find me all the books which whose price is greater than 30. About this since then you have book at Red ID equals 02. So at the rate tells it to look for attributes. So then you can say find all books and return the books which is which has ID to go under. So that's what this is. And similarly you can have comparison in the attributes to so at greater than 100 selects elements with attribute ID more than 100. And then we have x squared x query is the query language for XML so you can write something like this. So the concept is F SW and so it has a for loop and it has lead and then it has a rare and then you want to return something it's similar to SQL but so you can say for dollar x in document books dot XML slash bookstore slash books, so that's the x part. So it loads the book, books dot XML. And then it goes to a book slash books, or a bookstore slash book path. Returns your list of books. And then you say let's title equal to dollar X slash title, title using that spot. And then we'll just say where dollar X slash price 30 article by title return title. So that's what this is doing. I have never used this in my life. That's what completion is. Okay, it's upload JSON. So JSON is the entertain. Everybody uses JSON object notation. It was discovered by somebody. But it's very popular. And almost all the web applications use JSON as a data exchange. So here's how it looks like. So you have key value pairs you can have a dictionary with then I guess, another dictionary, and you might have a list inside as a value. And then for none is represented by as null and true or false is represented by small, true or true and so this is how it looks like. It's very lightweight. It's an equity that seems format, excuse value pairs. He is always strings enclosed in double quotes. You cannot have a list as a key. If you have

Unknown 40:45
if you have a helper as a key in your Python object that will convert that to string representation and put that in. So in the end, it will only have strings as keys. values can be strings, integers, and other dictionary a list none through Boolean bands. This Okay, so this is the official logo of JSON key features are its simplicity is easy for both humans to read and write and permissions to parse and generate like so. And then it has interoperability. It is supported by most programming languages, PHP, has it conversion, Python, JavaScript, Java, they all have a version which is which you can serialize to JSON object. Data Exchange. JSON is widely used in web applications and API's. What is it API? Application Programming Interface? We will look take a look at some API's today and hopefully efficiently find some JSON as it's on the page. You can go there defines the structure value some properties on SEO a bit of history about its okay, then we have JSON data that you have stains enclosed in double quotes. Numbers. In these are floating points that are all numbers, no special data. And objects are key value pairs enclosed in curly braces. Then you have arrays, which is an ordered list enclosed in square brackets. And then Boolean true or false and is it represents empty or missing. If you convert a JSON as a Python dictionary to JSON, your nonce will be converted to non

Unknown 43:02
has competitive excellent Jason looks like that. You can simply write to John and this becomes your JSON representation.

Unknown 43:17
Okay, so let's talk about JSON in Python. So, you have these JSON objects and other items that are your code in Python. There right so objectives dictionary, whereas list string is STR number is integer. And number real is float. And so you can say import JSON. So JSON is a built in package in Python. You can see import that and I define a list and it has one element and one dictionary inside so you can simply say JSON dot dump s. So dump s is your method a function to convert a dictionary to string representation of a JSON object. So when I do that, it's returning this right. So strings are always enclosed in double quotes. If you have single quotes in JSON is invalid. Then you have you know just going to do that. So you have a cup. You have a bar key and then the tupple is converted to a list right? Because there is no tupple inside JSON. So if you have a double inside it will be converted to a list. And when you convert it back it was to the manifest because there is no recollection of this was ever so you're gonna have to convert it explicitly yourself. So none becomes null. 1.0 is simply 1.02 is simply two right so there is no double quotes or anything when you say use an atom as an escape, look for them. That's what you will get is the same representation, nothing. Then you have like a Unicode value. And you know there is no nothing special in JSON format. So simply the same you 1234 and enclosed in other students. Then you have JSON dot dump as backslash backslash simply giving the same thing back. And lastly, you have a dictionary and then you can also say start is equal to true so it's a comparison that has a bunch of other parameters and it will give you a zero B zero c zero. So this is JSON in Python. Whenever you write an API or whenever there is a web server, these days, it's all JSON. You can for example, let's say you have some applications which are trying to reserve a flight, for example, if you want to find a fight between so and so on. Exchange is generally in JSON. So we'll see an example of how that looks in a browser tool. So when you open a browser and you see actual data or somebody says Okay, so we've talked about some major, like very commonly used methods is very important. I use them all the time. So load s is is converting a string representation of JSON to a Python object, right? So convert a string bytes or byte array instance containing a JSON document to a Python object. So if, if your string bytes or byte array does not contain a valid JSON, it will throw an error simply saying value what the problem is. It kind of can be cryptic because it'll tell you exactly index. The problem is that and then, you know, as humans might not be able to see but it will convert your strings to a Python dictionary basically. These are the input parameters that you may think nowadays the first one the s, which is a string of identity types, and then you know, it says the the CLAS s to a Python object using the conversion table, conversion table is this one. So using this it will convert your string to a pipe. We will see we will see some examples. So if the data being DC rice is not well JSON, or JSON decode error determination from a specific exception. In sequence six s can be strings bikes are byte array and input encoding should be UTF eight. If it is not, you might get encoding decoding.

Unknown 48:12
Then you have JSON dot load. So load s is working with strings as for string, that's how I remember it. And the load works with a file object. So you open a file and suppose that file contains a JSON than JSON dot load. It will simply give you a it will convert the contents of the file to a file. Same conversion table. Yeah, okay. There's nothing more to see that can see here. So it will this was fpu. It's not file pointer containing a JSON document to a Python. Very, it's used very frequently so you don't have to say JSON sorry file dot read and then convert using the load. So you can simply say, you can simply say, JSON dot load and you will define dump is is opposite of load s. So you know, it's converting your Python dictionary to a string representation. serialized object to a JSON formatted string. The conversion table is still the same Yeah. It's opposite of this alert load as that voice and object to a JSON string. Then you have json.com. So he realizes object as a JSON format stream to FP. So you can simply instead of converting it and then writing you can simply use JSON dot dump. Give it a file pointer, your JSON object will be converted to a string and return to the file object in one simple sentence. These are all the most common used objects for JSON.

Unknown 50:06
Then we have service oriented approach, so now we will talk about you know, what it means to be a service approach and talk about different services that can be API's should be defined or design a new web service shouldn't be called buildings. And I think this is a good time to talk about references

Unknown 51:14
almost.

Unknown 51:19
All couple of years

Unknown 51:34
to come.

Unknown 51:43
So awesome. So if you guys

Unknown 51:55
are looking.

Unknown 52:04
Going

Unknown 52:13
to buy

Unknown 52:49
you what should you

Unknown 53:07
do? I just started coming

Unknown 53:36
up.

Unknown 54:01
Okay.

Unknown 55:13
Right. So I've known about so there will be no office hours today to come down

Unknown 55:32
make happy from my side. So come come to office hours. Or you can send me emails if you want to do his own. And about the final project I am behind on sending that announcement. But an announcement is coming that you can write a one page proposal of your project describing what good are you using, how you will get that data and what you're going to do with the data and what's your final output will be like analysis and visualization. And then we will provide your feedback saying this is a check up or whatever. So then you've been making progress. And you know that that bank will be posting announced and suddenly if you start thinking about your product already good, very good. But then often it's good to have like three bags of rice in the end. I thought this was good. Okay, so the questions

Unknown 56:38
are we can extract the data directly from inside officials.

Unknown 56:44
If you're scraping data.

Unknown 56:47
It's not exactly the exactly with the data elements, IDs or attributes, completely picking up the data from like so.

Unknown 56:57
If you're talking about downloading a CSV data. So that's, that will not give you the full point. So there has to be some element of web scraping. Unless your project is so great that it does not matter where the data is. So it's it's a combination of a bunch of things. So if you get data from a CSV, and you do very simple things today. But if you have to get the data from CSV, and then you do grid analysis, you have a bunch of different sources. You have like 10 Different CSVs combined into that in some cases. That's a good project. And if you were streaming data from one website, it could be very simple, but you're actually scraping it and you're showing that it was difficult to get and use this technique. And so those are the different parts so it cannot be that a CSV do analysis, get a CSV loaded pandas matplotlib done. So the project is the number of data sources you should use and then it's up to you. I would suggest if you are using a CSV, it should be more than two. If you're scraping it can be one or two. If you're simply doing a neural network on some image set as Israel wants to do that it's I think one is enough because you're already going from one source and no, it's can be whatever you want. Your skeptics use UCSB combined, whichever. But that's why I want you guys to submit like a one page proposal, which tells me how many projects will be there there'll be how many teams will be there and depending on that what your effort is.

Unknown 58:50
Okay, questions.

Unknown 58:54
Okay, so let's talk about service oriented approach. So you might have already heard about SAS like SW is software as a service business everything is a service. So that's your service approach on that one implementation of it. So most trivial once timekeeping applications do they have services these days, nobody is publishing libraries. They provide everything as a service. You can have a debit card charge. You can have a reservation system, just using a bunch of API's and then the services publisher rules to other applications. They must follow those rules to make use of the service right so if you want to reserve a hotel room it might require your name and phone number and credit card and email and your address and so on. So it tells you we need all these things. So whatever form you're filling on the web is actually designed to conform to a service the actual portal. Reservation service is asking. A simple diagram you have an application. You have a bunch of services in the cloud and API's but each of the services to call that service successfully follow those routes. Have a similar architecture. You have every application, this application can book like auto rental for you, it can do that or it can reserve a hotel room for you can book a flight for you, right so this is one combined which can do all of these things. And of course, these things, they're not setting up themselves. So the auto rental company they have their own service which you can call and reserve a car from them. And then similarly for hotel and airline. So all of the airlines have like epi published so that whatever that condition can exist and I've talked about web services before let's just talk about a program. A program interface. API is it's largely abstract, it only specifies an interface, and it controls the behavior of the objects defined interface, right. So let's say there is a let's say you want to rent a car. So then that API might be first. Like check availability, right? So first, you have to check availability that God is available and then you can have you can have like get all cars, right so I'll give you all the cars which are available. Then you pick a card and then check to check availability. Tickets price, and so on. And then finally, is finally you can say this, right? So these are different API Interfaces. So this everything, get me the price, check the availability, and actually software that provides the functionality described when API is said to be an implementation of the API. So you can define a very nice API for full resolution system, and all the different applications or all the different companies can use that API and implement that and provide you experience different experience. So it's defined in terms of programming languages, used to build the application, right? So they can tell you, this is simply a web service. It's going to use a rest, architecture and this is what you need to do to because

Unknown 1:02:50
then because an API which I have created at ISI so this has implications because search adpkd Its Knowledge Graph. And I was talking about leaky data. So this is built on the wiki data wiki, at this point has around 100 million entities. So we took 100 million entities, filtered it out with a bunch of there are like 25 million published papers in metadata, right? So simply, it lists all the publishers about that. And then we create a JSON structure which allows you to search on different things. So in this case, you can search in different languages, so it only lists four, but I think there are like 11 different lenses, which you can search and then search type. And then you know, if you want a q naught q naught is an NP or a property properties, list of properties which define and then and so on. So, these are all the different parameters you can use. We will see an example of that, and you know more about HTTP search and how that API is defined and how you can call it. Okay, so, Katie, thank you so much with that request, right. So you have already used request. So you have a bunch of your parameters. Have you used your time because yet understand. Okay, so you want to bet on it as is you know, you can help provide more information to the API the further and further drill down on the data you want. So in this case, I have this is what this sentence, what is your kind of says, Get top five matching entities for the search term? Apple using the engram search factored in English language and internet central region, right. So you have q equal to Apple, the query is apple. extra info is true. You want extra information, language, en type is Engram size is five so you want the top five matching texts. So that's what that means. Then you create the URL by combining your URL parameters with the actual base URL. So you have actually is the ISA edu API question marks and the euro dollars. So the first year parameter is preceded by a question mark. So if you're writing queue first, it has to have a first line in the end, but in the beginning, and then subsequent parameters are separated by ampersand. So you can have and and and so on. So this is what it's doing. And inside equal to five, and angles, you could mean and so on. So when you run this, it will return you a JSON. And this is a struct right? It has keynote key 312 Which is your company Apple and not the actual fruit, which is kind of weird, but heavier. Okay, but there's a better way to do the same thing. So we have instead of writing defining this cryptic looking URL, with a string, you can simply define a dictionary. Right? So you can say it's an actually Q is a collection for true English en la. So not the data structure does not matter here, because everything will be converted to a string. So it doesn't matter if it's a Boolean or not. So everything is a string. And then you can simply say the question of get URL pattern is equal to your type. So the parents is expecting a dictionary, so you'll give it a dictionary, and it's returning you the same thing. So you can set the dictionary. It is easier to read and less prone to error. So you might miss a question mark or ampersand are nothing to worry about. And you can call it similarly and gives you the sample. So this is describing how to use the PHP case, which is an API request. You can use any API to find out what it is supporting in this case. I'm supporting cue action for language support. But you can use requests with any API on the vessels, and I hope you do as part of your final project. Okay, then we have HTTP search UI. And dev tools, we'll take a look at what it looks like. On the browser, but here on the left hand side, you have the URI, you can search something here, and it lists you a bunch of things. And you have the Network tab in the dev tools. So we saw the dev tools last week, which just show you the Gulf and structure. But here we will see another tab which is very important when debugging, why something is not working for you the status of your request. And so on. Right we'll see a proper example. Smart, but then you'd have web services technologies. So they're generally two like there is a soap which is WASD and based web services. Anyone heard of soap now, it's great to hear because it's this belongs in the past. It's, it's based on soap protocol. It's a it's a different protocol and exchange messages in XML format. There's no JSON support. So they it's kind of very tedious to use these days. The soap protocol says, first you send it something it will send you back. Then you gather information from that and send it back to get more information. So that's what so does. And it's kind of a fan videos. And then you have RESTful services. This is not how everything is created these days. It confirms the architecture. It's it uses simple HTTP, it's not using soap protocol, but it's using your HTTP and it's kind of easy to build up and use. So from thing if you create a if you go to a company and they ask you to write something and so

Unknown 1:09:35
so what actually is best? So rest is basically a set of principles. It was given by Roy Fielding in his PhD and in 2000. He came up with a set of principles in contrast, so that simply means Representational State Transfer. And the principles are, every useful data object is a resource like so you have SCFM car so all of those can cash become a resource. Every resource is uniquely identifiable. So that means those 10 cars will have a URL pointing to that right so you you can get more information about a car by simply calling that URL. And then all resources share a uniform interface, right so back in the face, you define their kind of uniform. Let's see an example what that means. And then the cost and responses they just transfer of representation of the source, right? So you can if you do a get request, you will get some information about it. If you do a put request, you will update something. If you do a delete you will delete something right so you're changing the presentation of the state of actual action, just things inside the data. We'll see more examples of this soon. So here's the responsibles application state and functionality is divided into resources. So when you design an API, let's say let's take an example of the car reservation system. So you have cars as a resource. And then you have your prices on the cars you have availability on the times. You have different attributes of the SUV. So you define those, and then every resource is uniquely identifiable. So you give it a URI. And when you hit that URI, it should give you actual information about that resource. So then you have uniform interface which is a constrained set of well defined and unseen set of content types, right. So well defined operations are the only four operations you can do, which is create, read, update, and delete, but this is all you can do in a database. And then constraint set of content types is your like, what's the structure of your JSON is? Or if you want to use XML, what's the structure? So that's what the rest principles are. Okay, this is a big sign so really slowly.

Unknown 1:12:21
Okay, so before you design a web service, what you need to do is identify all the conceptual entities that we wish to expose or services right. So it can be part list or detail part data on a purchase order, things like that. So you first, conceptually in your mind, think about, you know, what do you want to expose it as a service. Then you want to create a URL to each resource. You know, this is very important. If you don't have a URL which goes to a particular resource, it's not the rest web servers. Then you want to categorize your resources according to whether the clients can just receive the presentation or they can modify right so you have to think about in the thigh example, you you can only get information about the cars, you cannot add a car to a system, right? So that doesn't make any sense. You're not purchasing it and send it to them. So that doesn't make sense. So you can only read the availability of cars, cars. You can change the availability by booking a car that's all you can do. So you can availability will be changed the car itself will not be changed, right. And for other things, you know, you can add or modify booking, you can delete the bookings, for example. So this is what it means. You can read or update or delete. So you have to think about that and categorize your resources like that. And then you design your vessels. All the resources accessible via HTTP GET should be inside the factory. So if you do get this GET request on a resource, that should not update the resource in any way. So you're just reading it, just by reading it, you cannot change it you can. So for example in the staff example, so you do pop up is actually scratch. But the idea is when you do an extra DB GET request, the state of the resource in the database will not be changed. It will only be that like so you cannot update that and in working those sorts should not it doesn't work. Then you have put hyperlinks within its source representations to enable clients to deliver information. So this simply means when you've done something back, if you have extra information it should not be clubbed in a big JSON. It should be you should give it another URL. And then the clients can call that URL to get more information. So this is how it's bit different with so in soap, you you know you send some request gets back to you. You know some XML and then you have to read through the XML and construct a different request and then send it to the API and then get more information. In rest, it simply says just give it a URL. If you want more information, you will click that URL and get information makes things easy because everybody understand this. The real one correct. So the real data gradually so don't reveal everything in a single response. provide hyperlinks to non returnable key JSON but give them more information. And then finally, specify the format of response data using a schema it can be JSON or XML but you know these days see what this means. Okay, so we have SP request methods and rest. So, you are i Is everyone aware about what is SPP post? What is HTTP. So you have seen yet but there is post PUT and DELETE to write you know what that have you used it before. Somebody says something? No, but okay. So what that means in the rest is when you do a post request, it should be to create something. So we'll see examples of what that looks like. When you do a get request. It's only to read when you do a post request. It's generally to update something. So it will update if something exists. It might create if it does not exist, but that depends on the actual implementation. Then you have the delete, delete, simply just delete. You delete that resource. Post should use to create a resource get this for reading what is for updating and deleting is for deleting. So let's say your resource does not exist and you use a put on it. And by definition it says should be used for updating an existing resource. So it should show an error and tell you to use of course if you get into actual proper web service design design, it will tell you to use a post instead of okay, we will see this presentation if we have time. It's called teach a dog to rest i i learned about this when I was at USC years ago in one of the classes which has helped me to create web services or design web services. So here are some resources in this case are the only one resource which is dogs. And then there are four times X right so you have slash docs. And when you do a post on slash Doc's it will create a new route. When you do get on slash docs, it will return all the routes. When you do a put on slash docs, it will bulk update docs right so the format is you can define and how to bulk up it. But that's what if we go and delete our logs if we delete all the logs, but then you go to one particular resource which is the dogboe right so you can say dogs go if you try to create an existing dog if we throw an error because that dog already exists. VO already exists. And when you say the upvote get it will just show that not view this information about that. And if you do put on Doxo if it exists, it will update if not it will happen and then delete boy so we will see the slideshow share if we get time, but I recommend you go home you look at the slideshow if you'd like something slides it's not like text based images. It's very intuitive. And useful. So in the end, for any resource, we leave two URLs. The first is for interaction. So you know we want to see all the dogs and then the second is foreign elements. So dogs go and that's all we need. So if they have a resource called Cats then we'll have cats and then glad cats and the particular cat. So for every resource we just need to yours that's like recommended design. You don't have to call it but

Unknown 1:19:42
that's how it should

Unknown 1:19:49
be take a look at some some code and before we do that.

Unknown 1:20:18
So before we do that, let's go to config search.

Unknown 1:20:22
So this is what the interface looks like. You can just simply type something. So let's search for apples by Josh company, and then the fruit and the New York City and so on. And then there are different settings. So all of these is worldwide API so you can pick a language. English, like if I said German, for example. It's going to return me things matching in German. In this case, it's not the same thing because it has a description in German. So we have description in various languages. Okay, go back to English. And then you have all of these you can mix and match. But the point of change is is you can inspect this and forget about that but we're going to go to the network. Right. So it is nothing because we did not do a search yet. So let's say I want to search for, for example Obama. And you can see it did a request. Now we will take a look at type one, actually.

Unknown 1:21:39
So that was it okay

Unknown 1:21:51
so in here

Unknown 1:21:57
alright, let's take a look.

Unknown 1:22:00
So it says get, you know, we did a get request. And this is the base URL and these are the query parameters. So we did not set we did not select anything, but it still is constructing the URL based on the input. So Q is equal to Obama. That's what I typed type is and accent what role and which end item should have Q Right. So that's what this is. And then it tells you the status is 200 which means everything was fine at the time you played it back. This is HTTP 1.1 protocol. This is how much data was transferred. And there is an effort policies strict origin when cross region it's a pain when you actually wrapping a web service but for now, and DNS resolution in a server activity right. So and these are the responses measures and because it's so it tells you everything you want to know about what the browser is doing behind the scenes. So if you want to, if you go to a web page, and you want to see what the web page is doing behind the scenes, like odorizzi reservation system, what is it doing? You can simply open the network tabs and you know all that information is available here. What will not be available here is of course the authentication information if you if you are trying to access something behind authentication which is not open to public, that information will not be here because that it becomes unsecure. Anybody get just copied and reused. So that will not be there if the website is implemented properly. Sometimes you simply say and user equal to this and password equal to that so they will steal your data. Okay, there's a funny story about looking at things in the network pet. Peeves students from India will know that if you want to make an appointment for a visa for us there is currently like a one year wait like you have to wait one year just to get the appointment for the visa. And I had to do that for myself. And Isha was a TA he, what he did was he find that URL which was returning the dates for that available dates for the appointments. So he took the URL, he wrote a script and he made it run the script every few seconds. And in the end it will send you a telegram message with the dates and using that I could find for the next one. Right so you don't have to flex wave and refresh all the time. So he did that. And then I just used it. I did not do anything special. But in the end so that's the advantage of this right? So then when I tell this to people, they're like, Oh, can you help me find tickets to Taylor Swift for example. Let me charge you for that. Alright, so this is about the network's tab. Very useful resource. Take a look. You will find the API begins right? You don't have to. If something is not working some. There will be something here saying you know the server is down on things. Okay. Go back to Okay. So we have support for XML parsing in Python by default, so it's called packages file XML. And we're gonna use we're gonna see how we can use that to basically so this is how you import it Import XML eg Elementary, and then I'm simply saying calling it eg. Then you have some data, which is XML in string string representation. So you know, person names your phone and email. Do that. Then what we're doing is we're creating, we're parsing XML and creating a tree. So please do this. And when I print three, it simply gives me element person at whatever. So it's not printing the whole tree it just giving me the root element of that thing, which is person in this case. If that word was had used wrapper the magic then we would have had representation. Then you can say a predefined name and then we will get John because there is only one name in the source and the next is then you can save by email and then get high. Get hydrogen if you say yes or yes. Okay. When we go to that spots here's the there's a bit a bit more stuff in it. So your has two users and they have ID and a name. And I passed that into another excellent tree. And then I can say user list is stuff got fine or user that user theory using the XPath to get all the users and then representing the user conference, so we break things because we use a compass to which is true. And then because this is a list now I can iterate on it. I can print the item, I can get the ID that's the name of this. And we get element user ID 001 name is Chuck is two and so this is what we get from the survey pass estimates. Then we have a bookstore

Unknown 1:28:02
so we have this bookstore, it has two books. Then you can see to find on Book One so excited to find all the books, written the first book, get the author. But it's not only the elements, not the text to get the text you have to use dot text. The second one is find the book with ID equal to 102. An awful lot extra to get to know. Then the third one is Find Books was publisher is ABC and it allowed them to get and find the book, which was prices 25 And so, so this is some examples, some examples of using experts in XML. Then there is another library called XML and XML is a pipeline point binding for C libraries and libraries don't have to worry about that but it has better support for for experts. So I have already installed already installed Excellent. This is not a standard library. If you want to install it you can you can simply pip install. If you're saying if you're running it and seeing a problem, this is how you can do it. Now if I run this already satisfied. So this is one way to install a package from Jupyter Notebook itself. So you don't have to go to your terminal and solid start again. You can simply say this, and it will work and you have to have an explanation at the beginning to tell the trip to notebook that this is supposed to be a terminal command and it's not a Python

Transcribed by https://otter.ai